#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int friendCircles(const vector<string> & M)
{
	int result = 0;
	int N = M.size();
	if (N == 0) return 0;
	
	vector<bool> visited(N, false); 
	
	for (int i = 0; i < N; ++i)
	{
		bfs(result, status, M, i);
	}
	
	return result;
}

void bfs( int & result, vector<bool> & visited, const vector<string> & M, int i )
{
	if (visited[i])
	{
		return;
	}
	
	result += 1;
	
	queue<int> q;
	queue.push(i);
	
	while(!q.empty())
	{
		int cur = q.front();
		q.pop();
		
		if (visited[cur]) continue;
		visited[cur] = true;
		
		for (int j = 0; j < M.size(); ++j)
		{
			if (cur != j && M[cur][j] == 'Y' && !visited[j])
			{
				queue.push(j);
			}
		}
	}
}

int main() {
    int num;
    cin >> num;
    vector<string> friends;
    string line;
    for (int i=0; i<num && cin; ++i) {
        cin >> line;
        friends.push_back(line);
    };
    cout << friendCircles(friends) << endl;
    return 0;
}
